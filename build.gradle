apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

repositories {
    mavenCentral()
    jcenter()
}

version = '1.0'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'head'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1
    }
}

static def getGitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

println "####### Build Data #######"
println "======> Version: " + getVersionCode()
println "======> Branch: " + getGitBranch()

dependencies {
    compile 'com.google.guava:guava:20.0'
    compile 'commons-cli:commons-cli:1.4'

    testCompile 'junit:junit:4.12'
}

mainClassName = 'App'

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Encrypt files into images and back again',
                'Implementation-Version': version,
                'Main-Class': 'App'
    }
    baseName = project.name + '-complete'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJar(type: Copy) {
    from file("${buildDir}/libs/${project.name}-complete-${version}.jar")
    into file("${projectDir}/example")
}

task superBuild(dependsOn: ['clean', 'build', 'fatJar', 'copyJar']){
    build.mustRunAfter clean
    fatJar.mustRunAfter build
    copyJar.mustRunAfter fatJar
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}